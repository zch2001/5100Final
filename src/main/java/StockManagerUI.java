/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */



import com.mysql.cj.util.StringUtils;
//import finalproject_yupeichen.AddDialogForm;

import finalproject_yupeichen.DatabaseConnector;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import javax.swing.*;

import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.awt.Rectangle;
//import org.apache.commons.lang3.StringUtils; // Apache Commons Lang
import org.apache.commons.text.similarity.LevenshteinDetailedDistance;
import org.apache.commons.text.similarity.LevenshteinResults;



/**
 *
 * @author isabe
 */
public class StockManagerUI extends javax.swing.JFrame {
    private MainFrame mainframe;

    /**
     * Creates new form StockManagerUI
     */
    public StockManagerUI(MainFrame mainframe) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchTextField = new javax.swing.JTextField();
        SearchLabel = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        TableScrollPane = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        RefreshButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTextFieldActionPerformed(evt);
            }
        });

        SearchLabel.setText("Search");

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product ID", "Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableScrollPane.setViewportView(ProductTable);

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RefreshButton)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateButton)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteButton)
                        .addGap(18, 18, 18)
                        .addComponent(AddButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchLabel)
                    .addComponent(SearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateButton)
                    .addComponent(DeleteButton)
                    .addComponent(AddButton)
                    .addComponent(RefreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchTextFieldActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        int selectedRow = ProductTable.getSelectedRow();
        if (selectedRow != -1) 
        {
            int productId = getSelectedProductId(); // Retrieve the selected product ID
            String name = ProductTable.getValueAt(selectedRow, 1).toString();
            String price = ProductTable.getValueAt(selectedRow, 2).toString();
            String quantity = ProductTable.getValueAt(selectedRow, 3).toString();
        
            UpdateDialogForm updateDialogForm = new UpdateDialogForm(this, true);
            updateDialogForm.setProductId(productId); // Set the product ID
            updateDialogForm.populateFields(name, price, quantity); // Populate the fields
            updateDialogForm.setVisible(true);
        }   
        else 
        {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed

        // Get the selected row
        int selectedRow = ProductTable.getSelectedRow();
        if (selectedRow >= 0) {
            // Assume the first column is the unique identifier (primary key) for the row
            Object id = ProductTable.getModel().getValueAt(selectedRow, 0);
            // Execute delete operation
            DatabaseConnector.deleteRowFromDatabase(id);
            // Refresh the table model
            ((DefaultTableModel) ProductTable.getModel()).removeRow(selectedRow);
        } else {
            // No row selected
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
            AddDialogForm addDialogForm = new AddDialogForm(this, true); // 'this' refers to the main JFrame, true for modality
    addDialogForm.setVisible(true);
    }//GEN-LAST:event_AddButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
        populateTableFromDb();
        //DatabaseConnector.getProducts();
        javax.swing.JOptionPane.showMessageDialog(this, "Refreshed.");
        
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        String searchKeyword = SearchTextField.getText().toLowerCase();
    if (searchKeyword.isEmpty()) 
    {
        JOptionPane.showMessageDialog(this, "Please enter a search keyword.", "No Keyword", JOptionPane.WARNING_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
    int closestMatchIndex = -1;
    int shortestDistance = Integer.MAX_VALUE;
    LevenshteinDetailedDistance levenshteinDetailedDistance = new LevenshteinDetailedDistance();

    for (int i = 0; i < model.getRowCount(); i++) 
    {
        String entry = model.getValueAt(i, 1).toString().toLowerCase(); // Assuming column 1 (index 1) has the names
        LevenshteinResults results = levenshteinDetailedDistance.apply(entry, searchKeyword);
        int distance = results.getDistance(); // This gets the integer distance from the results

        if (distance < shortestDistance) 
        {
            shortestDistance = distance;
            closestMatchIndex = i;
        }
    }

    if (closestMatchIndex != -1) 
    {
        ProductTable.setRowSelectionInterval(closestMatchIndex, closestMatchIndex);
        ProductTable.scrollRectToVisible(new Rectangle(ProductTable.getCellRect(closestMatchIndex, 0, true)));
    } 
    else 
    {
            JOptionPane.showMessageDialog(this, "No matching product found.", "Search", JOptionPane.INFORMATION_MESSAGE);
    }    
    }//GEN-LAST:event_SearchButtonActionPerformed
    
    
    public int getSelectedProductId() {
     int selectedRow = ProductTable.getSelectedRow();
    if (selectedRow != -1) { // -1 means no selection
        Integer productId = (Integer) ProductTable.getModel().getValueAt(selectedRow, 0);
        return productId.intValue();
    } else {
        return -1; // Or throw new IllegalStateException("No row selected");
    }
}
    
    public void populateTableFromDb() {
    try {
        ResultSet rs; // This method should return a ResultSet
        rs = DatabaseConnector.getProducts();
        DefaultTableModel tableModel = new DefaultTableModel(
                new String[]{"Product ID", "Name", "Price", "Quantity"}, 0
        );
        
        while (rs.next()) {
            int id = rs.getInt("ProductID");
            String name = rs.getString("Name");
            BigDecimal price = rs.getBigDecimal("Price");
            int quantity = rs.getInt("Quantity");
            tableModel.addRow(new Object[]{id, name, price, quantity});
        }
        
        ProductTable.setModel(tableModel);
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle exception, possibly with a user-friendly error message
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockManagerUI().setVisible(true);
            }
        });
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JLabel SearchLabel;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JScrollPane TableScrollPane;
    private javax.swing.JButton UpdateButton;
    // End of variables declaration//GEN-END:variables
}
