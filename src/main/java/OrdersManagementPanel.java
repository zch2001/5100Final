
import java.awt.*;
import java.math.BigDecimal;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author bellarao
 */
public class OrdersManagementPanel extends javax.swing.JPanel {
    private MainFrame mainFrame;
    private DefaultTableModel currentModel;

    private JTextField[] orderTextFields; // 用于存储订单信息的文本框数组
    
    /**
     * Creates new form OrdersManagementPanel
     */
    public OrdersManagementPanel(MainFrame mainFrame) {
        this.mainFrame = mainFrame;
        initComponents();
        populateOrderTable();
    }
    
//    public void populateOrderTable(){
//        currentModel = DatabaseConnector.getOrderData();
//        orderViewTable.setModel(currentModel);
//        orderViewTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//
////        orderViewTable.getSelectionModel().addListSelectionListener(e -> updateTextFieldsWithSelectedOrder());
//    }

    public void populateOrderTable() {
        // 获取原始的 DefaultTableModel 实例
        DefaultTableModel originalModel = DatabaseConnector.getOrderData();

        // 创建一个新的 DefaultTableModel 子类实例
        DefaultTableModel editableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // 允许所有单元格可编辑
                return true;
            }

            // 重写其他必要的方法，将调用委托给原始模型
            @Override
            public int getRowCount() {
                return originalModel.getRowCount();
            }

            @Override
            public int getColumnCount() {
                return originalModel.getColumnCount();
            }

            @Override
            public Object getValueAt(int row, int column) {
                return originalModel.getValueAt(row, column);
            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {
                originalModel.setValueAt(aValue, row, column);
            }

            @Override
            public String getColumnName(int column) {
                return originalModel.getColumnName(column);
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return originalModel.getColumnClass(columnIndex);
            }
        };

        // 将新的可编辑模型设置为 JTable 的模型
        orderViewTable.setModel(editableModel);
        orderViewTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }








    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderViewTable = new javax.swing.JTable();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("Order Management");

        orderViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "OID", "CustomerID", "OrderDate", "Status", "TotalAmount", "PaymentMethod", "ShippingAddress", "BillingAddress", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderViewTable);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(updateButton)
                        .addGap(32, 32, 32)
                        .addComponent(deleteButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addComponent(jLabel1)))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(deleteButton))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderViewTable.getSelectedRow();
        if (selectedRow >= 0) {
            try {
                int orderId = (int)orderViewTable.getModel().getValueAt(selectedRow, 0); // OID
                String customerId = (String)orderViewTable.getModel().getValueAt(selectedRow, 1);
                String orderDate = (String)orderViewTable.getModel().getValueAt(selectedRow, 2);
                String status = (String)orderViewTable.getModel().getValueAt(selectedRow, 3);
                                System.out.println("For debug purpose: " + status);
                String totalAmountString = (String)orderViewTable.getModel().getValueAt(selectedRow, 4);
                BigDecimal totalAmount = new BigDecimal(totalAmountString);
                String paymentMethod = (String)orderViewTable.getModel().getValueAt(selectedRow, 5);
                String shippingAddress = (String)orderViewTable.getModel().getValueAt(selectedRow, 6);
                String billingAddress = (String)orderViewTable.getModel().getValueAt(selectedRow, 7);
                String notes = (String)orderViewTable.getModel().getValueAt(selectedRow, 8);

                if (DatabaseConnector.updateOrder(orderId, customerId, orderDate, status, totalAmount, paymentMethod, shippingAddress, billingAddress, notes)) {
                    JOptionPane.showMessageDialog(this, "Order updated successfully.");
                    System.out.println(totalAmount);
                    populateOrderTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update order.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid data format.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order to update.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderViewTable.getSelectedRow();
        if (selectedRow >= 0) {
            int orderId = (Integer) orderViewTable.getValueAt(selectedRow, 0);
            if (DatabaseConnector.deleteOrder(orderId)) {
                populateOrderTable(); 
                JOptionPane.showMessageDialog(this, "Order deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete order.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderViewTable;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
